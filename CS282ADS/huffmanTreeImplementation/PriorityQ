package Huffmancode;

public class PriorityQ {
    // array in sorted order, from max at 0 to min at size-1
    private int maxSize;
    private Node[] queArray;
    private int nItems;

    public PriorityQ(int maxSize) {
        this.maxSize = maxSize;
        this.queArray = new Node[maxSize];
        this.nItems = 0;
    }

    public void insert(Node newNode) {
        if (isFull()) {
            System.out.println("Queue is full.");
            return;
        }
        int j;
        if(nItems==0) // if no items,
            queArray[nItems++] = newNode; // insert at 0
        else // if items,
        {
            for(j=nItems-1; j>=0; j--) // start at end,
            {
                if( newNode.freq > queArray[j].freq ) // if new item larger,
                    queArray[j+1] = queArray[j]; // shift upward
                else // if smaller,
                    break; // done shifting
            } // end for
            queArray[j+1] = newNode; // insert it
            nItems++;
        } // end else (nItems > 0)
        if (nItems > 1) {
            Node left = remove();
            Node right = remove();
            Node parent = new Node(left.freq + right.freq, left, right);
            insert(parent);
        }
    }

    public Node remove() // remove minimum item
    { return queArray[--nItems]; }

    public Node peekMin() // peek at minimum item
    { return queArray[nItems-1]; }

    public boolean isEmpty() // true if queue is empty
    { return (nItems==0); }

    public boolean isFull() // true if queue is full
    { return (nItems == maxSize); }

    public int size() // returns the number of items currently in the queue
    { return nItems; }

}
